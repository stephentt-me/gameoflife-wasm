// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
		},
		"/empty.txt": &vfsgen۰CompressedFileInfo{
			name:             "empty.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3030,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\xcd\x31\x01\x00\x00\x0c\x02\xa0\x7f\x61\xd6\x3f\x9e\x29\xf4\x82\x02\xfc\xc0\x49\x24\x12\x89\x44\x22\x91\x48\x24\x92\x62\x92\x00\x00\x00\xff\xff\x16\x7f\xdf\x59\xd6\x0b\x00\x00"),
		},
		"/glider.txt": &vfsgen۰CompressedFileInfo{
			name:             "glider.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3131,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xa3\x03\xe0\x1a\xb5\x84\x64\x4b\x22\x22\xe8\xe1\x13\x1a\xdb\x02\xf1\xc9\x68\xc4\x8f\x5a\x32\x6a\xc9\xa8\x25\xa3\x96\x8c\x5a\x32\x6a\xc9\xa8\x25\xa3\x96\x0c\x0f\x4b\x00\x01\x00\x00\xff\xff\x02\x3e\x4c\x60\x3b\x0c\x00\x00"),
		},
		"/gosper-glider-gun.txt": &vfsgen۰CompressedFileInfo{
			name:             "gosper-glider-gun.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3130,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\xd2\xb1\x0d\x80\x30\x0c\x44\xd1\x9e\x61\x32\xcf\xdf\x7f\x12\x1a\x50\x14\x81\x29\x88\xaf\xfb\xd7\x44\x69\xfc\x24\xfb\x46\x11\x46\x5f\x8e\x8a\x88\x21\xb0\xbe\x6f\xbf\x5d\x84\x7b\x4b\xed\xc8\x1c\xc1\x94\x3a\x77\xf5\x44\xb8\x80\xd8\x4d\x58\x5a\x95\x3a\x3c\xcd\xb3\xbf\xdb\x15\x45\x52\x11\x11\x11\x11\x11\x11\x11\x11\xf9\x9d\x33\x00\x00\xff\xff\xa6\x4a\x2c\x39\x3a\x0c\x00\x00"),
		},
		"/living-forever-1.txt": &vfsgen۰CompressedFileInfo{
			name:             "living-forever-1.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3030,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xa3\x03\xe0\x1a\xb5\x64\xd4\x92\x51\x4b\x46\x2d\x19\xb5\x64\x64\x5b\x12\x01\x05\x10\x06\x44\x00\x45\x06\x2e\x31\x1a\x5c\xa3\x96\x8c\x5a\x32\x6a\xc9\xa8\x25\x64\x59\x02\x08\x00\x00\xff\xff\xf8\x39\xfe\xfc\xd6\x0b\x00\x00"),
		},
		"/living-forever-2.txt": &vfsgen۰CompressedFileInfo{
			name:             "living-forever-2.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3030,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xa3\x03\xe0\x1a\xb5\x64\xd4\x92\x51\x4b\x46\x2d\xc1\x0a\x22\x68\x6f\x49\x84\x5e\x44\x04\x3d\x2c\xa1\x87\x4f\x68\x1e\x27\x11\xb4\x8f\xf8\x08\x7a\x58\x32\x9a\x19\x47\x2d\x19\xb5\x64\xd4\x92\x91\x68\x09\x20\x00\x00\xff\xff\x95\xb4\x5c\x77\xd6\x0b\x00\x00"),
		},
		"/living-forever-3.txt": &vfsgen۰CompressedFileInfo{
			name:             "living-forever-3.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3030,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xa3\x03\xe0\x1a\xb5\x64\xd4\x92\x51\x4b\x46\x2d\x41\x05\x11\x11\x11\x7a\x11\x34\xb7\x84\x4e\xc1\x15\x41\x73\x9f\xe8\xd1\x27\xb8\xe8\x60\xc9\x68\x3e\x19\xb5\x64\xd4\x92\x51\x4b\x46\x2d\xa1\x95\x25\x80\x00\x00\x00\xff\xff\x1f\xfe\x50\xb9\xd6\x0b\x00\x00"),
		},
		"/pulsar.txt": &vfsgen۰CompressedFileInfo{
			name:             "pulsar.txt",
			modTime:          time.Date(2021, 3, 17, 4, 41, 11, 397261295, time.UTC),
			uncompressedSize: 3030,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xa3\x03\xe0\x1a\xb5\x64\xd4\x92\x51\x4b\x86\x90\x25\x11\x11\x11\x70\x92\x56\x96\x80\x6d\x80\x92\xa3\x96\x0c\x8e\x38\x19\x4d\x5d\xa3\xa9\x6b\xb4\x80\x1c\xb5\x64\xd4\x92\xa1\x6d\x09\x20\x00\x00\xff\xff\xe0\xe7\xf6\x00\xd6\x0b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/empty.txt"].(os.FileInfo),
		fs["/glider.txt"].(os.FileInfo),
		fs["/gosper-glider-gun.txt"].(os.FileInfo),
		fs["/living-forever-1.txt"].(os.FileInfo),
		fs["/living-forever-2.txt"].(os.FileInfo),
		fs["/living-forever-3.txt"].(os.FileInfo),
		fs["/pulsar.txt"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
